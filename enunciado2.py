# Modelo 2: Movimiento de un P√©ndulo Simple
# Un p√©ndulo simple se mueve bajo la influencia de la gravedad. Su movimiento angular est√°
# gobernado por la siguiente ecuaci√≥n diferencial:
# Donde:
# ‚Ä¢ Œ∏(t) es el √°ngulo del p√©ndulo respecto a la vertical (en radianes).
# ‚Ä¢ g = 9.8m/s2
# es la aceleraci√≥n debida a la gravedad.
# ‚Ä¢ L es la longitud del hilo del p√©ndulo (en metros).
# Tu tarea es:
# 1. Resolver la ecuaci√≥n diferencial utilizando el m√©todo de Taylor de segundo orden,
# haciendo una aproximaci√≥n para √°ngulos peque√±os (sin(Œ∏)‚âàŒ∏).
# 2. Graficar la evoluci√≥n del √°ngulo Œ∏(t) en funci√≥n del tiempo.
# Detalles:
# ‚Ä¢ Longitud del p√©ndulo: L=2m.
# ‚Ä¢ √Ångulo inicial: ùúÉ0=0.2 rad (11.46¬∞).
# ‚Ä¢ Velocidad angular inicial: dt/dŒ∏ (0) = 0 rad/s.
# ‚Ä¢ Intervalo de tiempo: ùë° ‚àà [0,10]s.
# ‚Ä¢ Tama√±o del paso: h = 0.1s.
# Requerimientos del programa:
# 1. Implementar el m√©todo de Taylor de segundo orden para resolver el sistema de
# ecuaciones:
# donde ùúî = dt/dŒ∏ es la velocidad angular.
# 2. Graficar los resultados:
# a. La evoluci√≥n del √°ngulo Œ∏(t) en funci√≥n del tiempo.
# b. Opcional: la evoluci√≥n de la velocidad angular ùúî = (t).


import numpy as np
import matplotlib.pyplot as plt

# Par√°metros
longitud = 2.0  # Longitud del p√©ndulo (m)
gravedad = 9.8  # Aceleraci√≥n de la gravedad (m/s¬≤)
angulo_inicial = 0.2  # √Ångulo inicial (rad)
velocidad_inicial = 0  # Velocidad angular inicial (rad/s)
tiempo_inicial = 0  # Tiempo inicial (s)
tiempo_final = 10  # Tiempo final (s)
h = 0.1  # Paso de tiempo (s)

# Calcular n√∫mero de pasos
n = int((tiempo_final - tiempo_inicial) / h)

# Inicializar arreglos
tiempo = np.linspace(tiempo_inicial, tiempo_final, n+1)
angulo = np.zeros(n+1)
velocidad_angular = np.zeros(n+1)

# Condiciones iniciales
angulo[0] = angulo_inicial
velocidad_angular[0] = velocidad_inicial

# Primeras derivadas
def derivada_angulo(vel):
    return vel

def derivada_velocidad(ang):
    return -(gravedad/longitud) * ang  # Aproximaci√≥n para √°ngulos peque√±os: sin(Œ∏) ‚âà Œ∏

# Segundas derivadas
def segunda_derivada_angulo(ang):
    return derivada_velocidad(ang)

def segunda_derivada_velocidad(vel):
    return -(gravedad/longitud) * vel

# M√©todo de Taylor de segundo orden
for i in range(n):
    angulo[i+1] = angulo[i] + h*derivada_angulo(velocidad_angular[i]) + \
                  (h**2/2)*segunda_derivada_angulo(angulo[i])
    velocidad_angular[i+1] = velocidad_angular[i] + h*derivada_velocidad(angulo[i]) + \
                            (h**2/2)*segunda_derivada_velocidad(velocidad_angular[i])

# Gr√°ficas
plt.figure(figsize=(12, 8))

# Gr√°fica del √°ngulo vs tiempo
plt.subplot(2, 1, 1)
plt.plot(tiempo, angulo, 'b-', label='Œ∏(t)')
plt.xlabel('Tiempo (s)')
plt.ylabel('√Ångulo (rad)')
plt.title('Movimiento del P√©ndulo - √Ångulo vs Tiempo')
plt.grid(True)
plt.legend()

# Gr√°fica de la velocidad angular vs tiempo
plt.subplot(2, 1, 2)
plt.plot(tiempo, velocidad_angular, 'r-', label='œâ(t)')
plt.xlabel('Tiempo (s)')
plt.ylabel('Velocidad Angular (rad/s)')
plt.title('Movimiento del P√©ndulo - Velocidad Angular vs Tiempo')
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()

